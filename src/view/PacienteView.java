/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.bean.CurrentCidade;
import model.bean.Paciente;
import model.dao.CidadeDAO;
import model.dao.EstadoDAO;
import model.dao.ExameDAO;
import model.dao.PacienteDAO;

/**
 *
 * @author William
 */
public class PacienteView extends javax.swing.JFrame {

    
    public PacienteView() {
        initComponents();    
        DefaultTableModel modelo = (DefaultTableModel) pacienteTable.getModel();
        readJTable();        
        novoExame.setEnabled(false);
        elementsEnabled(false,false);
    }    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        salvar = new javax.swing.JButton();
        nome = new javax.swing.JTextField();
        nasc = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        sexo = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        nomeS = new javax.swing.JFormattedTextField();
        buscar = new javax.swing.JToggleButton();
        atualizar = new javax.swing.JButton();
        apagar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        pacienteTable = new javax.swing.JTable();
        buscarCidade = new javax.swing.JButton();
        novo = new javax.swing.JButton();
        status = new javax.swing.JLabel();
        novoExame = new javax.swing.JButton();
        lastId = new javax.swing.JLabel();

        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("Nome :");

        salvar.setText("SALVAR");
        salvar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        salvar.setName(""); // NOI18N
        salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarActionPerformed(evt);
            }
        });

        nome.setMaximumSize(new java.awt.Dimension(4, 19));
        nome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomeActionPerformed(evt);
            }
        });

        try {
            nasc.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        nasc.setToolTipText("");
        nasc.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        nasc.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        nasc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nascKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel3.setText("nasc :");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Sexo : ");

        sexo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Masculino", "Feminino", "Outro" }));
        sexo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sexoActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("CADASTRO DE PACIENTE ");

        jLabel12.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Nome : ");

        nomeS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TypingNome(evt);
            }
        });

        buscar.setText("BUSCAR");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });

        atualizar.setText("ATUALIZAR DADOS");
        atualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarActionPerformed(evt);
            }
        });

        apagar.setText("APAGAR");
        apagar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        apagar.setName(""); // NOI18N
        apagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apagarActionPerformed(evt);
            }
        });

        pacienteTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "nome", "data criação"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        pacienteTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pacienteTableMousePressed(evt);
            }
        });
        jScrollPane3.setViewportView(pacienteTable);
        if (pacienteTable.getColumnModel().getColumnCount() > 0) {
            pacienteTable.getColumnModel().getColumn(0).setResizable(false);
            pacienteTable.getColumnModel().getColumn(1).setResizable(false);
            pacienteTable.getColumnModel().getColumn(2).setResizable(false);
        }

        buscarCidade.setText("SELECIONE CIDADE");
        buscarCidade.setToolTipText("");
        buscarCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarCidadeActionPerformed(evt);
            }
        });

        novo.setText("NOVO");
        novo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novoActionPerformed(evt);
            }
        });

        status.setForeground(new java.awt.Color(0, 153, 0));

        novoExame.setText("NOVO EXAME ");
        novoExame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novoExameActionPerformed(evt);
            }
        });

        lastId.setForeground(new java.awt.Color(255, 102, 51));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(salvar, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(apagar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 3, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(novo, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(atualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(nome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buscarCidade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nasc, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lastId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(novoExame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(sexo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nomeS, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buscar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel9)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nasc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarCidade)
                    .addComponent(sexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(atualizar)
                    .addComponent(novo)
                    .addComponent(novoExame))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lastId, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomeS)
                    .addComponent(jLabel12)
                    .addComponent(buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salvar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apagar)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
       
    Cidades cidades = new Cidades();
    EstadoDAO edao = new EstadoDAO();
    CidadeDAO cdao = new CidadeDAO();  
    ExameDAO exdao = new ExameDAO();
    CurrentCidade cCidade = new CurrentCidade();
    Paciente p = new Paciente();
    PacienteDAO dao = new PacienteDAO(); 
    private int salvarStatus = 0; 
    

    
    private int currentId (){
        novo.setEnabled(true);
        elementsEnabled(false);
        int id = 0;   
        try {
            id = Integer.parseInt(String.valueOf(pacienteTable.getModel().getValueAt(pacienteTable.getSelectedRow(),0)));     
            nome.setEnabled(true);
        } catch (NumberFormatException ex) {
            elementsEnabled (false,false);
            lastId.setText("");
        }
        return id;  
    }
    
    private void elementsEnabled (boolean b, boolean c) {
        nome.setEditable(b);
        nome.setEnabled(c);
        nasc.setEnabled(b);
        sexo.setEnabled(b);
        buscarCidade.setEnabled(b);
        apagar.setEnabled(!b & c);
        salvar.setEnabled(b);
        atualizar.setEnabled(!b & c);
    } 
    
    private void elementsEnabled (boolean b) {
        elementsEnabled (b,true);
    } 
    
    private void readJTable() {
        DefaultTableModel modelo = (DefaultTableModel) pacienteTable.getModel();
        modelo.setNumRows(0);
        PacienteDAO pdao = new PacienteDAO();
        for (Paciente p : pdao.read(nomeS.getText(),true)) {
            modelo.addRow(new Object[]{ 
                p.getId(),                
                p.getNome(),              
                p.getData(),    
            });
        }      
    }
    
    private void setCidade () {  
      if (cCidade.getNomeCidade() != null && cCidade.getIdCidade()!= 0) {
        buscarCidade.setText(cCidade.getNomeCidade());
      } else {
        buscarCidade.setText("SELECIONE CIDADE"); 
      }
    }   
    
    private void setValue () {
        PacienteDAO pdao = new PacienteDAO();
        if (currentId() != 0){
            p = pdao.readById(currentId());
            nome.setText(p.getNome());   
            buscarCidade.setText(String.valueOf(p.getCidadeNome()));    
            cCidade.setIdCidade(p.getCidadeId());
            nasc.setText(p.getNasc());             
            try {
                exdao.readLastID(currentId());
                lastId.setText("Saiu resultado do exame!");
                novoExame.setEnabled(true);
            } catch (Exception ex) {
                if ( exdao.lastExame(currentId()) != 0 ) {
                    lastId.setText("Aguardando resultado do exame!");  
                    novoExame.setEnabled(false);                    
                } else {
                    lastId.setText("");  
                    novoExame.setEnabled(true);    
                }
            }                         
            sexo.setSelectedItem(p.getSexo());
        } else {
            clear ();
        }
    }  
    
    private void clear () {
        nome.setText("");
        nasc.setText("");
        buscarCidade.setText("SELECIONE CIDADE");
        cCidade.setCidade("",0);
        sexo.setSelectedItem("Selecione");
    }
    
    private void setPaciente ()  {
        try {
            p.setId(currentId ());
        } catch (Exception ex) { 
        }
        p.setNome(nome.getText());
        p.setNasc(nasc.getText());
        p.setCidadeId(cCidade.getIdCidade());
        p.setSexo(String.valueOf(sexo.getSelectedItem()).charAt(0));  
    }
    
    private void create () {
        setPaciente ();     
            dao.create(p);
            status.setText(dao.getStatus());
            readJTable(); 
            clear ();     
            System.out.println("in create");
    }
    
    private void update () {
        setPaciente ();    
        if (getValidation () == true) {
            dao.update(p);  
            status.setText(dao.getStatus());
            readJTable(); 
            clear (); 
            System.out.println("in update ");
        } 
    }    
    
    private boolean getValidation () {
        boolean verdade = false;
        if (cCidade.getIdCidade() == 0) {
            JOptionPane.showMessageDialog(null,"Selecione uma cidade!");
            verdade = false;
        } else {
            verdade = true;        
        }   
        return verdade;
    }
    
    private void delete () {
        String nomeLinha = "";
        try {
            nomeLinha = String.valueOf(pacienteTable.getModel().getValueAt(pacienteTable.getSelectedRow(),1));
            int question = 0;
            if (!(String.valueOf( currentId() )).equals("")) {
                question = JOptionPane.showConfirmDialog(null,"Deseja realmente apagar paciente  \n     de id : "+currentId()+"\n nome : "+nomeLinha+" ?");
            }
            if (question == 0) {
                p.setId(currentId());
                dao.delete(p);
                status.setText(dao.getStatus());                
                readJTable();                  
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,"Selecione um paciente!");
        }
    }        
    
    private void salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarActionPerformed
        novo.setEnabled(false);
        atualizar.setEnabled(false);
        if (getValidation () == true ) {
            if (salvarStatus == 1) {
                create ();  
                System.out.println("create");
            } else if (salvarStatus == 2) {
                update();
                System.out.println("update");  
                System.out.println("in update : "+nasc.getText());
            } 
            this.salvarStatus = 0;
        }    
    }//GEN-LAST:event_salvarActionPerformed

    private void nomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomeActionPerformed

    private void sexoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sexoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sexoActionPerformed

    private void TypingNome(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TypingNome
        readJTable();
    }//GEN-LAST:event_TypingNome

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        readJTable();
    }//GEN-LAST:event_buscarActionPerformed

    private void apagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apagarActionPerformed
        delete();
        elementsEnabled(false,false);
    }//GEN-LAST:event_apagarActionPerformed

    private void atualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarActionPerformed
        setValue();
        elementsEnabled(true);    
        this.salvarStatus = 2;
    }//GEN-LAST:event_atualizarActionPerformed

    private void pacienteTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pacienteTableMousePressed
        setValue();
    }//GEN-LAST:event_pacienteTableMousePressed

    private void buscarCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarCidadeActionPerformed
        cidades.setVisible(true);
    }//GEN-LAST:event_buscarCidadeActionPerformed

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        dao.clearStatus();
        status.setText("");
    }//GEN-LAST:event_formMousePressed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        setCidade(); 
    }//GEN-LAST:event_formWindowActivated

    private void novoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novoActionPerformed
        clear();        
        elementsEnabled(true);  
        pacienteTable.clearSelection();
        this.salvarStatus = 1;
    }//GEN-LAST:event_novoActionPerformed

    private void novoExameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novoExameActionPerformed
        exdao.create(currentId());
        novoExame.setEnabled(false);
        lastId.setText("Aguardando resultado do exame!");
        status.setText(exdao.getStatus());
    }//GEN-LAST:event_novoExameActionPerformed

    private void nascKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nascKeyTyped

    }//GEN-LAST:event_nascKeyTyped
 
    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton apagar;
    private javax.swing.JButton atualizar;
    private javax.swing.JToggleButton buscar;
    private javax.swing.JButton buscarCidade;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lastId;
    private javax.swing.JFormattedTextField nasc;
    private javax.swing.JTextField nome;
    private javax.swing.JFormattedTextField nomeS;
    private javax.swing.JButton novo;
    private javax.swing.JButton novoExame;
    private javax.swing.JTable pacienteTable;
    private javax.swing.JButton salvar;
    private javax.swing.JComboBox<String> sexo;
    private javax.swing.JLabel status;
    // End of variables declaration//GEN-END:variables


}
