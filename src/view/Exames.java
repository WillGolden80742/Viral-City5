/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.bean.Resultado;
import model.bean.Exame;
import model.dao.DoencaDAO;
import model.dao.ResultadoDAO;
import model.dao.ExameDAO;

/**
 *
 * @author William
 */
public class Exames extends javax.swing.JFrame {

    private ResultadoDAO rdao = new ResultadoDAO();  
    private DoencaDAO ddao = new DoencaDAO();      
    private ExameDAO exdao = new ExameDAO(); 
    private Exame exame = new Exame(); 
    private int doencaCont = 0;
    private String resultados[][] = null;       
    
    public Exames() {
        initComponents();
        readJTableE();     
        readJTableD();     
        readJTableP(); 
        elementsEnabled(false);
        setIconTop ();            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jTextField1 = new javax.swing.JTextField();
        positivo = new javax.swing.JButton();
        negativo = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        examesTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        doencasTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        resultadoTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        PacienteId = new javax.swing.JTextField();
        limpar = new javax.swing.JToggleButton();
        apagar = new javax.swing.JButton();
        salvar = new javax.swing.JButton();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenuItem3.setText("jMenuItem3");

        jMenu1.setText("jMenu1");

        jMenu2.setText("jMenu2");

        jTextField1.setText("jTextField1");

        setTitle("Exames");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        positivo.setBackground(new java.awt.Color(51, 51, 51));
        positivo.setForeground(new java.awt.Color(255, 255, 255));
        positivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/right.png"))); // NOI18N
        positivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                positivoActionPerformed(evt);
            }
        });

        negativo.setBackground(new java.awt.Color(51, 51, 51));
        negativo.setForeground(new java.awt.Color(255, 255, 255));
        negativo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/arrow_right_left_back_circle-512.png"))); // NOI18N
        negativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negativoActionPerformed(evt);
            }
        });

        examesTable.setBackground(new java.awt.Color(51, 51, 51));
        examesTable.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        examesTable.setForeground(new java.awt.Color(255, 255, 255));
        examesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Exame ID", "Paciente ID", "Nome"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        examesTable.setToolTipText("");
        examesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                examesTableMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(examesTable);
        if (examesTable.getColumnModel().getColumnCount() > 0) {
            examesTable.getColumnModel().getColumn(0).setResizable(false);
            examesTable.getColumnModel().getColumn(1).setResizable(false);
            examesTable.getColumnModel().getColumn(2).setResizable(false);
        }

        doencasTable.setBackground(new java.awt.Color(51, 51, 51));
        doencasTable.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        doencasTable.setForeground(new java.awt.Color(255, 255, 255));
        doencasTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Doencas"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        doencasTable.setToolTipText("Exames");
        doencasTable.getTableHeader().setReorderingAllowed(false);
        doencasTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                doencasTableMousePressed(evt);
            }
        });
        jScrollPane3.setViewportView(doencasTable);
        if (doencasTable.getColumnModel().getColumnCount() > 0) {
            doencasTable.getColumnModel().getColumn(0).setResizable(false);
        }

        resultadoTable.setBackground(new java.awt.Color(51, 51, 51));
        resultadoTable.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        resultadoTable.setForeground(new java.awt.Color(255, 255, 255));
        resultadoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Negativo", "Positivo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultadoTable.setToolTipText("");
        resultadoTable.getTableHeader().setReorderingAllowed(false);
        resultadoTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                resultadoTableMousePressed(evt);
            }
        });
        jScrollPane4.setViewportView(resultadoTable);
        if (resultadoTable.getColumnModel().getColumnCount() > 0) {
            resultadoTable.getColumnModel().getColumn(0).setResizable(false);
            resultadoTable.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Paciente ID : ");

        PacienteId.setBackground(new java.awt.Color(51, 51, 51));
        PacienteId.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        PacienteId.setForeground(new java.awt.Color(255, 255, 255));
        PacienteId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PacienteIdKeyTyped(evt);
            }
        });

        limpar.setBackground(new java.awt.Color(51, 51, 51));
        limpar.setForeground(new java.awt.Color(255, 255, 255));
        limpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/backspace.png"))); // NOI18N
        limpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparActionPerformed(evt);
            }
        });

        apagar.setBackground(new java.awt.Color(51, 51, 51));
        apagar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        apagar.setForeground(new java.awt.Color(255, 255, 255));
        apagar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        apagar.setText("APAGAR");
        apagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apagarActionPerformed(evt);
            }
        });

        salvar.setBackground(new java.awt.Color(51, 51, 51));
        salvar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        salvar.setForeground(new java.awt.Color(255, 255, 255));
        salvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png"))); // NOI18N
        salvar.setText("SALVAR");
        salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(PacienteId, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(limpar, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(negativo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(positivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(apagar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(salvar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(negativo)
                    .addComponent(positivo))
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(limpar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PacienteId, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(0, 0, 0)
                .addComponent(salvar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(apagar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public int currentIdExame () { 
        int id = 0;
        try {
            id = Integer.parseInt(String.valueOf(examesTable.getModel().getValueAt(examesTable.getSelectedRow(),0)));  
            System.out.println(examesTable.getModel().getValueAt(examesTable.getSelectedRow(),0));
        } catch (Exception ex) {
             System.out.println(ex);
         }
         return id ; 
    }
    
    private void readJTableE() {
        DefaultTableModel modelo = (DefaultTableModel) examesTable.getModel();
        modelo.setNumRows(0);    
        int id = 0; 
        try {
            id = Integer.parseInt(PacienteId.getText());
        } catch (Exception nEx) {
            PacienteId.setText("");
        }   
        for (Exame d : exdao.read(id)) {
            modelo.addRow(new Object[]{ 
                d.getIdExame(),
                d.getId(),
                d.getNome()
            });
        }    
    }
    

    private void readJTableP() {
        DefaultTableModel modelo = (DefaultTableModel) resultadoTable.getModel();
        modelo.setNumRows(0);     
        int i =0;
        int next =0;
        i=0;        
        String resultadosExames[][] = new String[doencaCont][2];
        for (Resultado d : rdao.read(currentIdExame())) {    
            resultadosExames[i][0] = d.getNomeDoenca(); 
            resultadosExames[i][1] = String.valueOf(d.getResultado());                
            i++;
        } 
        i=0;
        for (Resultado d : rdao.read()) {  

                try {
                    if (resultadosExames[next][0].equals(d.getNomeDoenca())) {  
                        if (resultadosExames[next][1].equals("1")) {
                            resultados[i][1]=resultadosExames[next][0];
                        } else  {
                            resultados[i][0]=resultadosExames[next][0];
                        }
                        next++;
                    }
                } catch (Exception ex) {
                    resultados[i][0]=null;
                    resultados[i][0]=null; 
                }
            i++;
        }
        next=0;
        i = 0; 
        for (Resultado d : rdao.read()) {
            modelo.addRow(new Object[]{   
                resultados[i][0],
                resultados[i][1]
            });   
            System.out.println(resultados[i][0]+" | "+resultados[i][0]);
            i++;
        }     
        i = 0;
    } 
    
    private void readJTableD() {
        DefaultTableModel modelo = (DefaultTableModel) doencasTable.getModel();    
        modelo.setNumRows(0);
        modelo.setNumRows(0);        
        this.doencaCont=0;
        for (Resultado d : rdao.read()) {
            modelo.addRow(new Object[]{ 
                d.getNomeDoenca()
            });  
            this.doencaCont++;
        }                 
        resultados = new String[doencaCont][2];          
    }     
    
    private void salvar () {
        String[][] resultadoExame = new String[doencaCont][2];
        int next = 0;
        for (int l = 0;l<doencaCont;l++) {
            for (int c = 0;c<2;c++){ 
                if(resultadoTable.getModel().getValueAt(l,c)!= null) {
                    resultadoExame[next][0] = ""+c; 
                    resultadoExame[next][1] = ""+ddao.readId(String.valueOf( resultadoTable.getModel().getValueAt(l,c) ) ) ;                     
                    next++; 
                }
            }
        }   
        System.out.print("Coluna : \n");
        for (int b=0;b<doencaCont;b++) {
            System.out.println(resultadoExame[b][0]+" | "+resultadoExame[b][1]);
        }             
        System.out.print("Fim Coluna : \n");
        rdao.salvar(currentIdExame (),resultadoExame,next);
        elementsEnabled(false);
        examesTable.clearSelection();
        readJTableD();
        resetResultadoTable();        
    }
    
    private void elementsEnabled (boolean b) {
        resultadoTable.clearSelection();   
        doencasTable.clearSelection();        
        toggleElements(salvar,b);
        toggleElements(positivo,b);
        toggleElements(negativo,b); 
        toggleElements(apagar,b);
    } 
    

   private void toggleElements (JButton l, boolean toggle) {
        if(toggle){
            l.setForeground(Color.GRAY);  
        } else {
            l.setForeground(Color.LIGHT_GRAY);   
        }   
        l.setEnabled(toggle);        
    }  
     

    private void addDoenca () { 
        try {
            if (resultadoTable.getModel().getValueAt(doencasTable.getSelectedRow(),0) == null && resultadoTable.getModel().getValueAt(doencasTable.getSelectedRow(),1) == null ) {
                resultadoTable.getModel().setValueAt(doencasTable.getModel().getValueAt(doencasTable.getSelectedRow(),0),doencasTable.getSelectedRow(),0);
            }

        } catch (Exception ex) {
            System.out.println(ex);
        }       
    }  
    
    private void delete () {
        String nomeLinha;
        try {
            nomeLinha = String.valueOf(examesTable.getModel().getValueAt(examesTable.getSelectedRow(),2));
            int question = 0;
            if (!(String.valueOf(currentIdExame() )).equals("")) {
                question = JOptionPane.showConfirmDialog(null,"Deseja realmente apagar o exame \n     de id : "+currentIdExame()+"\n do paciente : "+nomeLinha+" ?");
            }
            if (question == 0) { 
                 exdao.delete(currentIdExame());
                 readJTableE();
                 System.out.println("Wololo");
            }
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(null,"Selecione um exame!");
        }
    }           
    
    private void positivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_positivoActionPerformed
        try {
            if (resultadoTable.getModel().getValueAt(resultadoTable.getSelectedRow(),0) != null) {
                resultadoTable.getModel().setValueAt(resultadoTable.getModel().getValueAt(resultadoTable.getSelectedRow(),0),resultadoTable.getSelectedRow(),1);
                resultadoTable.getModel().setValueAt(null,resultadoTable.getSelectedRow(),0); 
            }
        } catch (Exception Ex) {
            System.out.println("Nenhuma célula selecionada!");
        }
        addDoenca();
    }//GEN-LAST:event_positivoActionPerformed

    private void negativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negativoActionPerformed
        try {
            resultadoTable.getModel().setValueAt(resultadoTable.getModel().getValueAt(resultadoTable.getSelectedRow(),1),resultadoTable.getSelectedRow(),0);
            resultadoTable.getModel().setValueAt(null,resultadoTable.getSelectedRow(),1); 
        } catch (Exception Ex) {
            System.out.println("Nenhuma célula selecionada!");
        }
    }//GEN-LAST:event_negativoActionPerformed

    private void resetResultadoTable () {
        resultadoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Negativo", "Positivo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
    }
    
    private void selectLastExame () {
        int index = examesTable.getModel().getRowCount()-1;
        examesTable.setRowSelectionInterval(index,index);
        readJTableD();
        readJTableP();     
        elementsEnabled(true);        
    }
    
    private void examesTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_examesTableMousePressed
        readJTableD();
        readJTableP();     
        elementsEnabled(true);
    }//GEN-LAST:event_examesTableMousePressed

    private void resultadoTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultadoTableMousePressed
        doencasTable.setColumnSelectionInterval(0,0);
        doencasTable.setRowSelectionInterval(resultadoTable.getSelectedRow(),resultadoTable.getSelectedRow());
    }//GEN-LAST:event_resultadoTableMousePressed

    private void doencasTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doencasTableMousePressed
        resultadoTable.setColumnSelectionInterval(0,1);
        resultadoTable.setRowSelectionInterval(doencasTable.getSelectedRow(),doencasTable.getSelectedRow());
    }//GEN-LAST:event_doencasTableMousePressed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        resultadoTable.removeAll(); 
        elementsEnabled(false);
        resetResultadoTable();
        PacienteId.setText(" ");   
        readJTableE();           
        if (!exame.getCurrentIdExame().equals("") && !exame.getCurrentIdExame().equals("0")){
            PacienteId.setText(String.valueOf(exame.getCurrentIdExame()));        
            readJTableE();
            selectLastExame();
        }
        exame.setCurrentIdExame("");
    }//GEN-LAST:event_formWindowActivated

    private void PacienteIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PacienteIdKeyTyped
        readJTableE();
    }//GEN-LAST:event_PacienteIdKeyTyped

    private void limparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparActionPerformed
        PacienteId.setText("");
        readJTableE();
        elementsEnabled(false);       
        resetResultadoTable ();
    }//GEN-LAST:event_limparActionPerformed

    private void apagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apagarActionPerformed
        delete();
    }//GEN-LAST:event_apagarActionPerformed

    private void salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarActionPerformed
        salvar ();
        if (!exame.getCurrentIdExame().equals("") && !exame.getCurrentIdExame().equals("0")){
            PacienteId.setText(String.valueOf(exame.getCurrentIdExame()));        
            readJTableE();
            selectLastExame();
        }        
    }//GEN-LAST:event_salvarActionPerformed

    private void setIconTop () {
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/exame.png")));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField PacienteId;
    private javax.swing.JButton apagar;
    private javax.swing.JTable doencasTable;
    private javax.swing.JTable examesTable;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToggleButton limpar;
    private javax.swing.JButton negativo;
    private javax.swing.JButton positivo;
    private javax.swing.JTable resultadoTable;
    private javax.swing.JButton salvar;
    // End of variables declaration//GEN-END:variables

}
